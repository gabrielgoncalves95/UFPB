;PROJETO 2 - AV3
;GABRIEL GONCALVES BARRETO DOS SANTOS - 11318331

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           CONEXOES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;			    LCD	    PIC
;			   
;			    RS======RA2
;			    ENABLE==RA4
;			    DB4=====RA5
;			    DB5=====RE0
;			    DB6=====RE1
;			    DB7=====RE2
	
	
#INCLUDE <p16F877A.inc>	

;CLOCK DE 20MHZ ~ TEMPO POR INSTRUÇÃO DE 200ns	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ARQUIVOS DE DEFINICOES                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICOES
__CONFIG _BODEN_OFF & _CP_OFF & _PWRTE_ON & _WDT_OFF & _LVP_OFF & _HS_OSC
	
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    PAGINACAO DE MEMORIA                         *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;DEFINICAO DE COMANDOS DE USUARIO PARA ALTERACAO DA PAGINA DE MEMORIA
;DEFINICAO DOS BANCOS
#DEFINE	    BANK0   BCF	STATUS, RP0 ;SETA BANK 0 DE MEMORIA
#DEFINE	    BANK1   BSF	STATUS,	RP0 ;SETA BANK 1 DE MEMORIA
	
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         VARI?VEIS                               *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DOS NOMES E ENDERECOS DE TODAS AS VARIAVEIS UTILIZADAS 
; PELO SISTEMA

	CBLOCK	0x20	;ENDERECO INICIAL DA MEMORIA DE
					;USUARIO
		W_TEMP		;REGISTRADORES TEMPORARIOS PARA USO
		
		STATUS_TEMP	;JUNTO AS INTERRUPCOES
				
		CONTADOR_ESPERA	;VARIAVEL QUE AUMENTA O TEMPO DE ESPERA
		
		LETRA		;SIMBOLO QUE SERA ESCRITO NO DISPLAY
				
		VAR		;VARIAVEL UTILIZADA PARA SALVAR O VALOR DA 
				;LEITURA DE ADRESH E PARA TRATAR CASOS ONDE 
				;BARRAS TEM QUE SER APAGADAS (ESCRITA INVERSA)	
				
		CONTADOR	;VARIAVEL UTILIZADA NA SUBTRACAO (SALVA O RESULTADO)
		
		POSICAO		;SALVA POSICAO DO CURSOR
		
		NOVA_POSICAO	;POSICAO NOVA PARA ONDE SE DEVE ADICIONAR
				;OU REMOVER BARRAS


	ENDC			;FIM DO BLOCO DE MEMORIA	
	
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                        FLAGS INTERNOS                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DE TODOS OS FLAGS UTILIZADOS PELO SISTEMA

	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                         CONSTANTES                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DE TODAS AS CONSTANTES UTILIZADAS PELO SISTEMA

	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           ENTRADAS                              *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DE TODOS OS PINOS QUE SER?O UTILIZADOS COMO ENTRADA
; RECOMENDAMOS TAMBEM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)

	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                           SAIDAS                                *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; DEFINICAO DE TODOS OS PINOS QUE SERAO UTILIZADOS COMO SAIDA
; RECOMENDAMOS TAMBEM COMENTAR O SIGNIFICADO DE SEUS ESTADOS (0 E 1)
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       VETOR DE RESET                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
	
	ORG	0x00			;ENDERE?O INICIAL DE PROCESSAMENTO
	GOTO	INICIO
	
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    IN?CIO DA INTERRUP??O                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; ENDERE?O DE DESVIO DAS INTERRUP??ES. A PRIMEIRA TAREFA ? SALVAR OS
; VALORES DE "W" E "STATUS" PARA RECUPERA??O FUTURA

	ORG	0x04			;ENDERE?O INICIAL DA INTERRUP??O
	MOVWF	W_TEMP		;COPIA W PARA W_TEMP
	SWAPF	STATUS,W
	MOVWF	STATUS_TEMP	;COPIA STATUS PARA STATUS_TEMP

	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                    ROTINA DE INTERRUP??O                        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; AQUI SER? ESCRITA AS ROTINAS DE RECONHECIMENTO E TRATAMENTO DAS
; INTERRUP??ES

	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                 ROTINA DE SA?DA DA INTERRUP??O                  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; OS VALORES DE "W" E "STATUS" DEVEM SER RECUPERADOS ANTES DE 
; RETORNAR DA INTERRUP??O

SAI_INT
	SWAPF	STATUS_TEMP,W
	MOVWF	STATUS		;MOVE STATUS_TEMP PARA STATUS
	SWAPF	W_TEMP,F
	SWAPF	W_TEMP,W	;MOVE W_TEMP PARA W
	RETFIE

	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*	            	 ROTINAS E SUBROTINAS                      *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
; CADA ROTINA OU SUBROTINA DEVE POSSUIR A DESCRI??O DE FUNCIONAMENTO
; E UM NOME COERENTE ?S SUAS FUN??ES.	

;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;   ROTINAS DE ESPERA UTILIZADAS PARA INICIALIZAR O DISPLAY        *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
;ROTINA PARA GERAR UM TEMPO DE ESPERA DE 1 MILISEGUNDO
;(O TEMPO SEMPRE PASSA POR GARANTIA)
ESPERA_1MILI
	
	BANK1
	MOVLW	B'10000100'	    ;PRESCALE DE 1:32 (1.6 MS)
	MOVWF	OPTION_REG
	
	BANK0
	MOVLW	.100		    ;VALOR ATRIBUIDO AO TIMER PARA ESPERAR 
				    ;UM POUCO MAIS DE 1 MILISEGUNDO
	MOVWF	TMR0
	BCF	INTCON, TMR0IF	    ;LIMPA FLAG
	
LOOP_ESPERA_1
	BTFSS	INTCON, TMR0IF	    ;ESPERA O TIMER ESTOURAR E VOLTA
	GOTO	LOOP_ESPERA_1
	
	RETURN

	
	
;ROTINA PARA GERAR UM TEMPO DE ESPERA DE 5 MILISEGUNDOS
;(O TEMPO SEMPRE PASSA POR GARANTIA)
ESPERA_5MILI
	MOVLW	.5
	MOVWF	CONTADOR_ESPERA	    ;REPETE A ESPERA DE 1MILI 5 VEZES 
				    ;(RESULTA EM MAIS DE 5 MILISEGUNDOS)
				    
LOOP_ESPERA_5
	CALL	ESPERA_1MILI	
	DECFSZ	CONTADOR_ESPERA
	GOTO	LOOP_ESPERA_5

	RETURN
	

	
;ROTINA PARA GERAR UM TEMPO DE ESPERA DE 20 MILISEGUNDOS 
;(O TEMPO SEMPRE PASSA POR GARANTIA)
ESPERA_20MILI
	MOVLW	.20
	MOVWF	CONTADOR_ESPERA	    ;REPETE A ESPERA DE 1MILI 20 VEZES 
				    ;(RESULTA EM MAIS DE 20 MILISEGUNDOS)
				   
LOOP_ESPERA_20
	CALL	ESPERA_1MILI
	
	DECFSZ	CONTADOR_ESPERA
	GOTO	LOOP_ESPERA_20	
	
	RETURN
	

	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
;   ROTINAS DE INICIALIZACAO DO DISPLAY OU ENVIO DA ESCRITA   *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *	

;ENVIA O ENABLE PARA O LCD, APLICANDO A ESCRITA
ENVIA_LCD	
	BSF	PORTA, 4    ;SETA ENABLE
	NOP		    ;ESPERA 1000NS POR GARANTIA(A ESPECIFICACAO EXIGE 600NS)
	NOP		    ;CADA NOP EQUIVALE A 200NS DEVIDO AO CLOCK DE 20MHZ
	NOP
	NOP
	NOP
	BCF	PORTA, 4	;CLEAR ENABLE
	
	CALL	ESPERA_1MILI	;ESPERA UM TEMPO PADRAO MAIOR QUE 100NS 
				;(FOI USADO A ROTINA DE 1 MILISEGUNDO)
	
	RETURN
	
	
;ENVIA COMANDO QUE LIGA O LCD: 0 0 0 0 | 1 1 1 1 
;BASEADO NO FLUXOGRAMA DE INICIALIZACAO
LIGA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BCF	PORTE, 2    ;DB7 0 
	BCF	PORTE, 1    ;DB6 0 
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 0 
	CALL	ENVIA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BSF	PORTE, 2    ;DB3 1 
	BSF	PORTE, 1    ;DB2 1 DISPLAY ON
 	BCF	PORTE, 0    ;DB1 1 CURSOR ON
	BCF	PORTA, 5    ;DB0 1 BRINKING ON
	CALL	ENVIA_LCD

	RETURN

	
	
;ENVIA COMANDO QUE DESLIGA O LCD: 0 0 0 0 | 1 0 0 0
;BASEADO NO FLUXOGRAMA DE INICIALIZACAO
LCD_OFF	
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BCF	PORTE, 2    ;DB7 0 
	BCF	PORTE, 1    ;DB6 0 
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 0 
	CALL	ENVIA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BSF	PORTE, 2    ;DB3 1 
	BCF	PORTE, 1    ;DB2 0 DISPLAY OFF
 	BCF	PORTE, 0    ;DB1 0 CURSOR OFF
	BCF	PORTA, 5    ;DB0 0 BRINKING OFF
	CALL	ENVIA_LCD

	RETURN
	
	
	
;ENVIA COMANDO QUE LIMPA O LCD: 0 0 0 0 | 0 0 0 1 
;BASEADO NO FLUXOGRAMA DE INICIALIZACAO
LCD_CLEAR
		
	BCF	PORTA, 2    ;RS 0 PARA ENVIO DE INSTRUCAO
	BCF	PORTE, 2    ;DB7 0 
	BCF	PORTE, 1    ;DB6 0 
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 0 
	CALL	ENVIA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BCF	PORTE, 2    ;DB3 0 
	BCF	PORTE, 1    ;DB2 0 
 	BCF	PORTE, 0    ;DB1 0 
	BSF	PORTA, 5    ;DB0 1 
	CALL	ENVIA_LCD

	RETURN
	
	

;ROTINA PARA INICIALIZAR O DISPLAY BASEADA NO FLUXOGRAMA
INICIALIZA_LCD
	
	;PREPARA UM SINAL '0 0 0 1 1' PARA SER LIDO TRES VEZES
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO	
	BCF	PORTE, 2
	BCF	PORTE, 1
	BSF	PORTE, 0
	BSF	PORTA, 5
	
	;ESPERA 20 MILISEGUNDOS APÓS O POWER ON (EXECUCAO DA FUNCAO LIGA_LCD)
	;PRECISA ESPERAR PELO MENOS 15MS 
	CALL	ESPERA_20MILI   
	
	;CHAMA ENVIA_LCD PARA O ENVIO DO PRIMEIRO SINAL COM '0 0 0 1 1'
	CALL	ENVIA_LCD	
	
	;ENTAO ESPERA 5 MILISEGUNDOS (MAIOR QUE 4.1MILISEGUNDOS EXIGIDOS)
	CALL	ESPERA_5MILI   

	;CHAMA ENVIA_LCD PARA O ENVIO DO SEGUNDO SINAL COM '0 0 0 1 1'
	CALL	ENVIA_LCD
	
	;ENTAO ESPERA 1 MILISEGUNDO (MAIOR QUE 100MICROSEGUNDOS EXIGIDOS)
	CALL	ESPERA_1MILI
	
	;CHAMA ENVIA_LCD PARA O ENVIO DO TERCEIRO SINAL COM '0 0 0 1 1'
	CALL	ENVIA_LCD	
		
	;PREPARA PRIMEIRO SETUP DE CONFIGURACAO '0 0 1 0' PARA SER ENVIADO DUAS VEZES;
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BCF	PORTE, 2    ;DB7 0
	BCF	PORTE, 1    ;DB6 0
	BSF	PORTE, 0    ;DB5 1
	BCF	PORTA, 5    ;DB4 0
	
	;ENVIA PRIMEIRO SETUP DE CONFIGURACAO
	CALL	ENVIA_LCD
		
	;ENVIA SEGUNDO SETUP DE CONFIGURACAO
	CALL	ENVIA_LCD
	
	;FUNCTION SET QUE DEFINE O USO DE 2 LINHAS E 10 PONTOS DE CARACTERES
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BSF	PORTE, 2    ;DB3 1
	BSF	PORTE, 1    ;DB2 1
 	BCF	PORTE, 0    ;DB1 0
	BCF	PORTA, 5    ;DB0 0
	CALL	ENVIA_LCD
	
	
	;DESLIGA O LCD COMO PARTE DA INICIALIZACAO
	CALL	LCD_OFF
	
	;LIMPA O LCD COMO PARTE DA INICIALIZACAO
	CALL	LCD_CLEAR
	
	;ESPERA 1 MILISEGUNDO POR GARANTIA ANTES DE DEFINIR O ENTRY MODE
	CALL	ESPERA_1MILI

	;ENTRY MODE SET	
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BCF	PORTE, 2    ;DB7 0 
	BCF	PORTE, 1    ;DB6 0 
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 0 
	CALL	ENVIA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIO DE INSTRUCAO
	BCF	PORTE, 2    ;DB3 0 
	BSF	PORTE, 1    ;DB2 1 (NO DATASHEET TEM 1 APESAR DE 0 NO DOCUMENTO DO FLUXO DE INICIALIZACAO)
 	BSF	PORTE, 0    ;DB1 1 CURSOR VAI PRA FRENTE - INCREMENTA
	BCF	PORTA, 5    ;DB0 0 VISUALIZACAO DO DISPLAY NAO DESLIZA
	CALL	ENVIA_LCD
	
	RETURN


	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * 
;   ROTINAS DE ESCRITA NO DISPLAY E TRATAMENTO DO VALOR LIDO PELO CONVERSOR  *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;ROTINA QUE ESCREVE A PRIMEIRA LINHA DO DISPLAY COMO NA ESPECIFICACAO	
ESCREVE_PRIMEIRA_LINHA
	
    MOVLW	B'01100100' ;d
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'01000010' ;B
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00111001' ;9
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00010000' ;espaço
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00110111' ;7
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00010000' ;espaço
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO	

    MOVLW	B'00110101' ;5
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO	

    MOVLW	B'00010000' ;espaço
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00110011' ;3
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00010000' ;espaço
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00010000' ;espaço
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00110000' ;0
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00010000' ;espaço
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO

    MOVLW	B'00010000' ;espaço
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO	

    MOVLW	B'00110011' ;3
    MOVWF	LETRA
    CALL	ESCREVE_SIMBOLO	
    
    RETURN
    
	
;ROTINA QUE CONFIGURA O DISPLAY PRA ESCREVER PRA FRENTE	(ESQUERDA PRA DIREITA)
FLUXO_COMUM
	BCF	PORTA, 2    ;RS	0 PARA ENVIAR INSTRUCAO
	BCF	PORTE, 2    ;DB7 0 
	BCF	PORTE, 1    ;DB6 0 
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 0 
	CALL	ENVIA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIAR INSTRUCAO
	BCF	PORTE, 2    ;DB3 0
	BSF	PORTE, 1    ;DB2 1
 	BSF	PORTE, 0    ;DB1 1 CURSOR INCREMENTA
	BCF	PORTA, 5    ;DB0 0 NAO DESLIZA A VISUALIZACAO DO DISPLAY
	CALL	ENVIA_LCD
		
	RETURN
	
	
;ROTINA QUE CONFIGURA O DISPLAY PRA ESCREVER PRA TRAS (DIREITA PRA ESQUERDA)	
FLUXO_INVERTIDO
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIAR INSTRUCAO
	BCF	PORTE, 2    ;DB7 0 
	BCF	PORTE, 1    ;DB6 0 
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 0 
	CALL	ENVIA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIAR INSTRUCAO
	BCF	PORTE, 2    ;DB3 0
	BSF	PORTE, 1    ;DB2 1
 	BCF	PORTE, 0    ;DB1 0 CURSOR DECREMENTA
	BCF	PORTA, 5    ;DB0 0 NAO DESLIZA A VISUALIZACAO DO DISPLAY
	CALL	ENVIA_LCD
	
	RETURN
		    
    
;LIMPA O VALOR DAS PORTAS ANTES DE ATRIBUIR NOVOS VALORES PARA NAO GERAR ERRO
LIMPA_ESCRITA
	
	BCF	PORTE, 2    ;DB7 0 	
	BCF	PORTE, 1    ;DB6 1 	
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 1 		
	
	RETURN
	
	
;ROTINA QUE ANALISA A VARIAVEL 'LETRA' BIT A BIT PARA DETERMINAR 
;QUAL SIMBOLO SERA ESCRITO NO DISPLAY
ESCREVE_SIMBOLO
	
	;LIMPA VALOR DAS PORTAS ANTES DE ATRIBUIR NOVOS
	CALL	LIMPA_ESCRITA
	
	BSF	PORTA, 2    ;RS	1 PARA ENVIAR CARACTERE
	
	BTFSC	LETRA, 7
	BSF	PORTE, 2    ;DB7
	
	BTFSC	LETRA, 6
	BSF	PORTE, 1    ;DB6
	
	BTFSC	LETRA, 5
 	BSF	PORTE, 0    ;DB5

	BTFSC	LETRA, 4
	BSF	PORTA, 5    ;DB4 
	
	CALL	ENVIA_LCD
	
	CALL	LIMPA_ESCRITA
	
	BSF	PORTA, 2    ;RS	1 PARA ENVIAR CARACTERE
	
	BTFSC	LETRA, 3
	BSF	PORTE, 2    ;DB3 
	
	BTFSC	LETRA, 2
	BSF	PORTE, 1    ;DB2
	
	BTFSC	LETRA, 1
 	BSF	PORTE, 0    ;DB1

	BTFSC	LETRA, 0
	BSF	PORTA, 5    ;DB0
	
	CALL	ENVIA_LCD	
	
	RETURN
	

;ROTINA PARA POSICIONAR O CURSOR NA SEGUNDA LINHA APOS ESCREVER A PRIMEIRA 
;(1 1 0 0 | 0 0 0 0)
POSICIONA_CURSOR
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIAR INSTRUCAO
	
	BSF	PORTE, 2    ;DB7 1 	
	BSF	PORTE, 1    ;DB6 0 	
 	BCF	PORTE, 0    ;DB5 0 
	BCF	PORTA, 5    ;DB4 0 	
	
	CALL	ENVIA_LCD
	
	BCF	PORTA, 2    ;RS	0 PARA ENVIAR INSTRUCAO
	
	BCF	PORTE, 2    ;DB3 0 	
	BCF	PORTE, 1    ;DB2 0 	
 	BCF	PORTE, 0    ;DB1 0 
	BCF	PORTA, 5    ;DB0 0 	
	
	CALL	ENVIA_LCD
	
	RETURN
	
	
;ROTINA QUE ESCREVE NA DIRECAO NORMAL (DA ESQUERDA PRA DIREITA)	
ESCREVE_FRENTE
	CALL	FLUXO_COMUM	    ;CHAMA FUNCAO QUE SETA A ESCRITA NO FLUXO NORMAL
	MOVLW	B'11111111'	    ;APLICA O CARACTERE 'PRETO' NA VARIAVEL LETRA
	MOVWF	LETRA
	CALL	ESCREVE_SIMBOLO	    ;CHAMA A FUNCAO QUE ESCREVE O SIMBOLO NO DISPLAY
	RETURN
	
	
;ROTINA QUE ESCREVE NA DIRECAO INVERTIDA (DA DIREITA PRA ESQUERDA - VOLTANDO)
ESCREVE_TRAS
	CALL	FLUXO_INVERTIDO	    ;CHAMA FUNCAO QUE SETA A ESCRITA NO FLUXO CONTRARIO
	MOVLW	B'00010000'	    ;APLICA O CARACTERE 'ESPACO' NA VARIAVEL LETRA
	MOVWF	LETRA
	CALL	ESCREVE_SIMBOLO	    ;CHAMA A FUNCAO QUE ESCREVE O SIMBOLO NO DISPLAY
	RETURN
	
	
;ROTINA QUE TRATA O CASO DA MOVIMENTACAO SER CONTRARIA
;NESSE CASO, O RESULTADO DA SUBTRACAO ENTRE NOVA_POSICAO E POSICAO DA NEGATIVO
;PRA PEGAR A QUANTIDADE DE BARRAS QUE DEVEM SER SUBSTITUIDAS POR ESPACO
;SUBTRAI-SE A VARIAVEL DE 255, RESULTANDO NO NUMERO DE BARRAS QUE DEVEM SER APAGADAS
RESOLVE_NEGATIVO
	MOVLW	.255
	MOVWF	VAR
	MOVFW	CONTADOR
	SUBWF	VAR, W
	MOVWF	CONTADOR
	INCF	CONTADOR, F
	INCF	CONTADOR, F	    ;AUMENTA O RESULTADO EM 1 PARA COMPENSAR O CASO NEGATIVO
				    ;SE NAO HOUVER ESSA COMPENSACAO SEMPRE SOBRA UMA BARRA A MAIS
	
LOOP_ESCRITA_TRAS		    ;ROTINA QUE ESCREVE UM ESPACO NO FLUXO INVERTIDO O NUMERO DE VEZES
	DECF	POSICAO, F	    ;QUE FOR SETADO NO CONTADOR (RESULTADO DA SUBTRACAO)
	CALL	ESCREVE_TRAS
	DECFSZ	CONTADOR, F
	GOTO	LOOP_ESCRITA_TRAS
	GOTO	LEITURA
	
	
	
;ROTINA QUE ESCREVE NO FLUXO NORMAL
ESCRITA_FRENTE			    
	NOP
LOOP_ESCRITA_FRENTE		    ;ROTINA QUE ESCREVE UMA BARRA NO FLUXO NORMAL O NUMERO DE VEZES 
	INCF	POSICAO, F	    ;QUE FOR SETADO NO CONTADOR (RESULTADO DA SUBTRACAO)
	CALL	ESCREVE_FRENTE
	DECFSZ	CONTADOR, F
	GOTO	LOOP_ESCRITA_FRENTE
	GOTO	LEITURA
	

;ROTINA QUE FAZ A LEITURA DO VALOR DO CONVERSOR A/D	
LEITURA
	CLRF	VAR
	CALL	ESPERA_1MILI
	BSF	ADCON0, 2

ESPERE
	BTFSC	ADCON0, 2
	GOTO	ESPERE
	MOVFW	ADRESH
	MOVWF	VAR			;SALVA O VALOR EM ADRESH
	GOTO	VERIFICA_MOVIMENTACAO	;FUNCAO QUE DETERMINA A NOVA QUANTIDADE 
					;DE BARRAS QUE DEVEM ESTAR PRESENTES NO LCD
	
	
	
;ROTINA QUE VERIFICA A NOVA LEITURA DE ADRESH E QUANTAS BARRAS SERAO ESCRITAS OU REMOVIDAS
VERIFICA_MOVIMENTACAO
					
	CLRF	NOVA_POSICAO		;VARIAVEL QUE SALVA O NUMERO DE BARRAS QUE DEVEM APARECER
	INCF	NOVA_POSICAO, F		;COLOCA UMA BARRA POR PADRAO COMO REQUISITO 
					;DA ESPECIFICACAO (O VALOR DE -10dB/0.31V)

;TESTA SE FOI MAIOR QUE 18 (-9dB/0.35V)
VERIFICA_18
	MOVLW	.18
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_20		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY

;TESTA SE FOI MAIOR QUE 20 (-8dB/0.40V)
VERIFICA_20
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.20
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_23		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 23 (-7dB/0.45V)
VERIFICA_23
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.23
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_26		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY

;TESTA SE FOI MAIOR QUE 26 (-6dB/0.50V)
VERIFICA_26
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.26
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_29		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 29 (-5dB/0.56V)
VERIFICA_29
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.29
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_32		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY

;TESTA SE FOI MAIOR QUE 32 (-4dB/0.63V)
VERIFICA_32
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.32
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_36		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 36 (-3dB/0.70V)
VERIFICA_36
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.36
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_41		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 41 (-2dB/0.79V)
VERIFICA_41
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.41
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_45		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 45 (-1dB/0.89V)
VERIFICA_45
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.45
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_51		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 51 (0dB/1V)
VERIFICA_51
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.51
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_57		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 57 (1dB/1.1V)
VERIFICA_57
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.57
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_64		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY

;TESTA SE FOI MAIOR QUE 64 (2dB/1.26V)
VERIFICA_64
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.64
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_72		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 72 (3dB/1.41V)
VERIFICA_72
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.72
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_81		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY
	
;TESTA SE FOI MAIOR QUE 81 (4dB/1.59V)
VERIFICA_81
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.81
	SUBWF	VAR, W
	BTFSC	STATUS, C
	GOTO	VERIFICA_91		;SE FOI MAIOR, TESTA O PROXIMO
	GOTO	VERIFICA_DIRECAO	;SE FOI MENOR, ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY

;TESTA SE FOI MAIOR QUE 91 (5dB/1.78V)
VERIFICA_91
	INCF	NOVA_POSICAO, F		;INCREMENTA A QUANTIDADE DE BARRAS
	MOVLW	.91
	SUBWF	VAR, W
	BTFSC	STATUS, C
	INCF	NOVA_POSICAO		;SE FOI MAIOR, INCREMENTA O NUMERO DE BARRAS
	GOTO	VERIFICA_DIRECAO	;ESCREVE A QUANTIDADE DE BARRAS NO DISPLAY (QUE SERA MAXIMA)
	
		

;ROTINA QUE VERIFICA SE A ESCRITA SERA NO FLUXO NORMAL OU INVERTIDO
VERIFICA_DIRECAO
	
	MOVFW	POSICAO
	SUBWF	NOVA_POSICAO, W	    ;SUBTRAI O VALOR DA POSICAO ATUAL PELO DA 
				    ;NOVA POSICAO (QUE ACABOU DE SER DETERMINADA PELA ROTINA 'VERIFICA_MOVIMENTACAO')
				    
	MOVWF	CONTADOR	    ;SALVA O RESULTADO EM CONTADOR
	
	BTFSC	STATUS, Z	    ;SE A POSICAO DEVE SE MANTER, ENTAO APENAS VOLTA PARA 
				    ;LEITURA PARA PEGAR UM NOVO VALOR DO CONVERSOR
	GOTO	LEITURA
	
	BTFSS	STATUS, C	    
	GOTO	RESOLVE_NEGATIVO    ;SE A POSICAO RESULTOU EM UM DESLOCAMENTO NEGATIVO (REMOCAO DE BARRAS) 
				    ;VAI PARA A FUNCAO RESOLVE_NEGATIVO (QUE SUBTRAI DE 255 PARA PEGAR O 
				    ;VALOR DO DESLOCAMENTO INVERSO)
				    
	GOTO	ESCRITA_FRENTE	    ;SE A POSICAO RESULTOU EM UM DESLOCAMENTO POSITIVO (ADICAO DE BARRAS) 
				    ;VAI PARA A FUNCAO ESCRITA_FRENTE QUE IRA ESCREVER O NUMERO DE BARRAS 
				    ;ADICIONAL NECESSARIO
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIO DO PROGRAMA                          *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

	
INICIO
	BANK1
	MOVLW	B'00000001'	;DEFINE RA0 COMO ENTRADA PARA O CONVERSOR A/D
	MOVWF	TRISA
	MOVLW	B'00000000'
	MOVWF	TRISB
	MOVLW	B'00000000'
	MOVWF	TRISC
	MOVLW	B'00000000'
	MOVWF	TRISD
	MOVLW	B'00000000'
	MOVWF	TRISE
	

	MOVLW	B'10001111'
	MOVWF	OPTION_REG
	MOVLW	B'00000000'
	MOVWF	INTCON
	
	MOVLW	B'00000100'
	MOVWF	ADCON1

	MOVLW	B'00000111'
	MOVWF	CMCON

	BANK0
	
	MOVLW	B'10000001'
	MOVWF	ADCON0
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     INICIALIZACAO DAS VARI?VEIS                 *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

;CHAMADA DA FUNCAO QUE VAI EFETUAR O FLUXO DE INICIALIZACAO DO DISPLAY
CALL	INICIALIZA_LCD
	
;LIGA O LCD QUE FOI DESLIGADO NA INICIALIZACAO
CALL	LIGA_LCD
	
;ESCREVE A PRIMEIRA LINHA DO DISPLAY (dB9 7 5 3  0  3)
CALL	ESCREVE_PRIMEIRA_LINHA
	
;POSICIONA O CURSOR NA LINHA 2
CALL	POSICIONA_CURSOR
	
;ESCREVE A PRIMEIRA BARRA PARA INDICAR QUE O DISPOSITIVO ESTA OPERANDO
MOVLW	B'11111111' ;PRETO
MOVWF	LETRA
CALL	ESCREVE_SIMBOLO	
	
;SETA A POSICAO INICIAL DO CURSOR COMO 1 (JA QUE A POSICAO 0 DEVE FICAR SEMPRE COM UMA BARRA)
MOVLW	.1
MOVWF	POSICAO
	
	
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                     ROTINA PRINCIPAL                            *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	


MAIN
	GOTO	LEITURA		;UMA VEZ CHAMADA A PRIMEIRA LEITURA, O PROGRAMA FICA SEMPRE EM LOOP
				;ENTRE LEITURA DO CONVERSOR E ESCRITA NO DISPLAY
	GOTO	MAIN
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
;*                       FIM DO PROGRAMA                           *
;* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
	
    END